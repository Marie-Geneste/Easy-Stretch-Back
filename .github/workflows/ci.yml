name: CI (backend only)

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    env:
      # Vars DB lues par app/app/models/sequelize-client.js
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      # Autres vars appli si nécessaires à tes tests
      PORT: ${{ secrets.PORT }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      GMAIL_USER: ${{ secrets.GMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
      FRONT_URL: ${{ secrets.FRONT_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # On démarre UNIQUEMENT Postgres du docker-compose du repo back
      - name: Start Postgres (compose)
        run: |
          docker compose up -d postgresql
          # Attendre que Postgres réponde
          for i in {1..30}; do
            docker exec postgrecontainer pg_isready -U "${DB_USER}" -d "${DB_NAME}" && break
            sleep 1
          done

      # Build du backend (target dev si tu l'as configuré ainsi)
      - name: Build backend image
        run: docker compose build backend

      # Lancer les tests backend dans le conteneur
      - name: Run backend tests
        run: |
          docker compose run --rm \
            -e NODE_ENV=test \
            -e DB_HOST="${DB_HOST}" \
            -e DB_PORT="${DB_PORT}" \
            -e DB_NAME="${DB_NAME}" \
            -e DB_USER="${DB_USER}" \
            -e DB_PASSWORD="${DB_PASSWORD}" \
            -e PORT="${PORT}" \
            -e JWT_SECRET="${JWT_SECRET}" \
            -e GMAIL_USER="${GMAIL_USER}" \
            -e EMAIL_PASS="${EMAIL_PASS}" \
            -e RECAPTCHA_SECRET_KEY="${RECAPTCHA_SECRET_KEY}" \
            -e FRONT_URL="${FRONT_URL}" \
            backend sh -lc "npm ci && npm test -- --ci --watchAll=false"

      - name: Compose down
        if: always()
        run: docker compose down -v


