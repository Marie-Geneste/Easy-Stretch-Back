name: CI (backend only)

on:
  push:
    branches: ['**']
  pull_request:

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    env:
      # DB & App env
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      PORT: ${{ secrets.PORT }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      GMAIL_USER: ${{ secrets.GMAIL_USER }}
      EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
      RECAPTCHA_SECRET_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
      FRONT_URL: ${{ secrets.FRONT_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Postgres (compose)
        run: |
          docker compose up -d postgresql
          # Wait for Postgres readiness
          for i in {1..30}; do
            docker exec postgrecontainer pg_isready -U "${DB_USER}" -d "${DB_NAME}" && break
            sleep 1
          done

      - name: Build backend image (dev target)
        run: docker compose build backend

      - name: Run DB migrations (using DATABASE_URL)
        run: |
          docker compose run --rm \
            -e NODE_ENV=test \
            -e DATABASE_URL="${DATABASE_URL}" \
            backend sh -lc "npm ci && npx sequelize-cli db:migrate --url \"${DATABASE_URL}\""

      - name: Run backend tests
        run: |
          docker compose run --rm \
            -e NODE_ENV=test \
            backend sh -lc "npm test -- --ci"

      - name: Compose down
        if: always()
        run: docker compose down -v

