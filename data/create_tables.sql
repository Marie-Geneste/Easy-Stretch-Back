\c easystretch_db;

BEGIN;

/* ========= Domain & e-commerce ENUMs ========= */
DROP DOMAIN IF EXISTS "email" CASCADE;
CREATE DOMAIN "email" AS text CHECK (
  value ~ '^[a-zA-Z0-9.!#$%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'
);

DO $$BEGIN IF EXISTS (SELECT 1 FROM pg_type WHERE typname='payment_status_enum') THEN DROP TYPE payment_status_enum; END IF; END$$;
DO $$BEGIN IF EXISTS (SELECT 1 FROM pg_type WHERE typname='order_status_enum') THEN DROP TYPE order_status_enum; END IF; END$$;

CREATE TYPE payment_status_enum AS ENUM ('pending','paid','failed','refunded');
CREATE TYPE order_status_enum   AS ENUM ('draft','processing','shipped','delivered','cancelled');

/* ========= Drop tables (ordre sÃ»r) ========= */
DROP TABLE IF EXISTS "order_item" CASCADE;
DROP TABLE IF EXISTS "order" CASCADE;
DROP TABLE IF EXISTS "product" CASCADE;

DROP TABLE IF EXISTS "user_stretch" CASCADE;
DROP TABLE IF EXISTS "stretch" CASCADE;
DROP TABLE IF EXISTS "category" CASCADE;
DROP TABLE IF EXISTS "user" CASCADE;
DROP TABLE IF EXISTS "role" CASCADE;

/* ========= Fonction & triggers timestamps ========= */
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_date := NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

/* ========= Tables core ========= */

CREATE TABLE "role" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE "user" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "email" email NOT NULL UNIQUE,
  "password" VARCHAR NOT NULL,
  "username" VARCHAR(15) NOT NULL,
  "role_id" INTEGER NOT NULL REFERENCES "role"("id"),
  creation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_date  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE "category" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE "stretch" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(255) NOT NULL,
  "description" TEXT NOT NULL,
  "main_image" VARCHAR(512) DEFAULT NULL,
  "description_image" VARCHAR(512) DEFAULT NULL,
  "category_id" INTEGER REFERENCES "category"("id"),
  creation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_date  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE "user_stretch" (
  "user_id" INTEGER NOT NULL REFERENCES "user"("id") ON DELETE CASCADE,
  "stretch_id" INTEGER NOT NULL REFERENCES "stretch"("id") ON DELETE CASCADE,
  creation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_date  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY ("user_id","stretch_id")
);

/* ========= Tables e-commerce ========= */

CREATE TABLE "product" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(255) NOT NULL,
  "description" TEXT,
  "price" NUMERIC(10,2) NOT NULL CHECK ("price" >= 0),
  "stock" INTEGER NOT NULL DEFAULT 0 CHECK ("stock" >= 0),
  "image" VARCHAR(512),
  creation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_date  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE "order" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" INTEGER NOT NULL REFERENCES "user"("id") ON DELETE CASCADE,
  "total_price" NUMERIC(10,2) NOT NULL DEFAULT 0 CHECK ("total_price" >= 0),
  "delivery_address" TEXT,
  "billing_address"  TEXT,
  "payment_status" payment_status_enum NOT NULL DEFAULT 'pending',
  "order_status"   order_status_enum   NOT NULL DEFAULT 'draft',
  creation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_date  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE "order_item" (
  "order_id"   INTEGER NOT NULL REFERENCES "order"("id") ON DELETE CASCADE,
  "product_id" INTEGER NOT NULL REFERENCES "product"("id"),
  "quantity"   INTEGER NOT NULL CHECK ("quantity" > 0),
  "price"      NUMERIC(10,2) NOT NULL CHECK ("price" >= 0), -- snapshot du prix
  creation_date TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_date  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  PRIMARY KEY ("order_id","product_id")
);

/* ========= Triggers updated_date ========= */

CREATE TRIGGER trg_updated_role
BEFORE UPDATE ON "role" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_user
BEFORE UPDATE ON "user" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_category
BEFORE UPDATE ON "category" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_stretch
BEFORE UPDATE ON "stretch" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_user_stretch
BEFORE UPDATE ON "user_stretch" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_product
BEFORE UPDATE ON "product" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_order
BEFORE UPDATE ON "order" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

CREATE TRIGGER trg_updated_order_item
BEFORE UPDATE ON "order_item" FOR EACH ROW EXECUTE FUNCTION set_updated_at();

COMMIT;

